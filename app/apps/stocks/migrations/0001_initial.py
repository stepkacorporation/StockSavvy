# Generated by Django 5.1.3 on 2024-11-14 09:44

import django.contrib.postgres.fields.ranges
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('ticker', models.CharField(db_index=True, help_text='Тикер акции.', max_length=10, primary_key=True, serialize=False, verbose_name='тикер')),
                ('shortname', models.CharField(help_text='Краткое название инструмента.', max_length=50, null=True, verbose_name='краткое название')),
                ('secname', models.CharField(help_text='Название финансового инструмента.', max_length=50, null=True, verbose_name='название')),
                ('latname', models.CharField(help_text='Название финансового инструмента на английском языке.', max_length=50, null=True, verbose_name='латинское название')),
                ('prevprice', models.DecimalField(decimal_places=10, default=0, help_text='Цена последней сделки предыдущего дня.', max_digits=20, null=True, verbose_name='предыдущая цена')),
                ('lotsize', models.PositiveIntegerField(help_text='Количество ценных бумаг в одном стандартном лоте.', null=True, verbose_name='размер лота')),
                ('facevalue', models.DecimalField(decimal_places=17, help_text='Номинальная стоимость одной ценной бумаги на текущую дату.', max_digits=34, null=True, verbose_name='номинальная стоимость')),
                ('faceunit', models.CharField(help_text='Код валюты, в которой выражена номинальная стоимость ценной бумаги.', max_length=10, null=True, verbose_name='валюта номинала')),
                ('status', models.CharField(help_text='Индикатор "разрешены/запрещены торговые операции".', max_length=1, null=True, verbose_name='статус')),
                ('decimals', models.PositiveSmallIntegerField(default=0, help_text='Количество десятичных знаков дробной части числа. Используется для форматирования значений полей с типом DECIMAL.', null=True, verbose_name='количество десятичных знаков')),
                ('minstep', models.DecimalField(decimal_places=10, help_text='Минимально возможная разница между ценами, указанными в заявках на покупку/продажу ценных бумаг.', max_digits=20, null=True, verbose_name='минимальный шаг')),
                ('prevdate', models.DateField(help_text='Дата предыдущего торгового дня.', null=True, verbose_name='дата предыдущей торговой сессии')),
                ('issuesize', models.PositiveBigIntegerField(help_text='Количество ценных бумаг в выпуске.', null=True, verbose_name='объем выпуска')),
                ('isin', models.CharField(help_text='Международный идентификационный код ценной бумаги.', max_length=20, null=True, verbose_name='ISIN')),
                ('regnumber', models.CharField(help_text='Номер государственной регистрации.', max_length=50, null=True, verbose_name='регистрационный номер')),
                ('prevlegalcloseprice', models.DecimalField(decimal_places=10, default=0, help_text='Официальная цена закрытия предыдущего дня, рассчитанная по правилам торговли как средневзвешенная цена сделок за последние 10 минут основной сессии, включая сделки в постторговый период или на аукционе закрытия.', max_digits=20, null=True, verbose_name='официальная цена закрытия')),
                ('currencyid', models.CharField(help_text='Валюта расчетов по инструменту.', max_length=10, null=True, verbose_name='валюта')),
                ('sectype', models.CharField(help_text='Тип ценной бумаги.', max_length=1, null=True, verbose_name='тип ценной бумаги')),
                ('listlevel', models.PositiveSmallIntegerField(help_text='Уровень листинга.', null=True, verbose_name='уровень листинга')),
                ('settledate', models.DateField(help_text='Дата расчетов по сделке.', null=True, verbose_name='дата расчетов')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='обновлено')),
            ],
            options={
                'verbose_name': 'акция',
                'verbose_name_plural': 'акции',
                'ordering': ('ticker',),
            },
        ),
        migrations.CreateModel(
            name='PriceChange',
            fields=[
                ('stock', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='price_change', serialize=False, to='stocks.stock', verbose_name='акция')),
                ('value_per_day', models.DecimalField(decimal_places=18, max_digits=36, verbose_name='изменение в день')),
                ('percent_per_day', models.DecimalField(decimal_places=18, max_digits=36, verbose_name='процент в день')),
                ('value_per_year', models.DecimalField(decimal_places=18, max_digits=36, verbose_name='изменение в год')),
                ('percent_per_year', models.DecimalField(decimal_places=18, max_digits=36, verbose_name='процент в год')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='обновлено')),
            ],
            options={
                'verbose_name': 'Изменение цены',
                'verbose_name_plural': 'Изменения цены',
            },
        ),
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favourite_stocks', to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='stocks.stock', verbose_name='акция')),
            ],
            options={
                'verbose_name': 'Избранное',
                'verbose_name_plural': 'Избранные',
            },
        ),
        migrations.CreateModel(
            name='BlacklistedStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stocks.stock', verbose_name='акция')),
            ],
            options={
                'verbose_name': 'Акция в черном списке',
                'verbose_name_plural': 'Акции в черном списке',
            },
        ),
        migrations.CreateModel(
            name='Candle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('open', models.DecimalField(decimal_places=18, help_text='Цена открытия.', max_digits=36, verbose_name='открытие')),
                ('close', models.DecimalField(decimal_places=18, help_text='Цена закрытия.', max_digits=36, verbose_name='закрытие')),
                ('high', models.DecimalField(decimal_places=18, help_text='Самая высокая цена.', max_digits=36, verbose_name='максимум')),
                ('low', models.DecimalField(decimal_places=18, help_text='Самая низкая цена.', max_digits=36, verbose_name='минимум')),
                ('value', models.DecimalField(decimal_places=18, help_text='Общая стоимость сделок за период свечи.', max_digits=36, verbose_name='стоимость')),
                ('volume', models.DecimalField(decimal_places=18, help_text='Общий объем сделок за период свечи.', max_digits=36, verbose_name='объем')),
                ('time_range', django.contrib.postgres.fields.ranges.DateTimeRangeField(db_index=True, help_text='Временной диапазон, в течение которого свеча представляет торговую активность.', verbose_name='временной диапазон')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candles', to='stocks.stock', verbose_name='акция')),
            ],
            options={
                'verbose_name': 'свеча',
                'verbose_name_plural': 'свечи',
                'ordering': ('-time_range',),
                'unique_together': {('stock', 'time_range')},
            },
        ),
    ]
